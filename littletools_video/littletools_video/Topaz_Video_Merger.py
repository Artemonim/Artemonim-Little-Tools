#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
    --- AUTO-GENERATED DOCSTRING ---
    This docstring is automatically generated by Agent Docstrings.
    Do not modify this block directly.

    Classes/Functions:
      - Functions:
        - merge_files(primary_input: Path, video_input: Path, output_path: Path) (line 35)
    --- END AUTO-GENERATED DOCSTRING ---
Topaz Video Merger Tool

A Typer-based CLI tool to merge a video processed by Topaz Video AI
with its original audio track and subtitles.
This script is designed to be a plugin for the 'littletools-cli'.
"""

import asyncio
from pathlib import Path

import typer
from rich.console import Console
from typing_extensions import Annotated

from littletools_core.utils import ensure_dir_exists
from littletools_core.utils import get_platform_info
from littletools_core.utils import setup_signal_handler
from littletools_video.ffmpeg_utils import ProcessingStats
from littletools_video.ffmpeg_utils import get_video_duration
from littletools_video.ffmpeg_utils import run_ffmpeg_command

app = typer.Typer(
    name="topaz-merger",
    help="Merge Topaz-processed video with original audio/subtitles.",
    no_args_is_help=True,
)
console = Console()

OUTPUT_DIR = Path.cwd() / "0-OUTPUT-0"


async def merge_files(primary_input: Path, video_input: Path, output_path: Path):
    """Asynchronously merges the video and audio/subtitle streams."""
    stats = ProcessingStats()

    cmd = [
        "ffmpeg",
        "-y",
        "-i",
        str(primary_input),
        "-i",
        str(video_input),
        "-map",
        "1:v:0",
        "-map",
        "0:a?",
        "-map",
        "0:s?",
        "-c",
        "copy",
        str(output_path),
    ]

    console.print("[*] Starting merge process with FFmpeg...")
    total_duration = await get_video_duration(str(video_input))

    success = await run_ffmpeg_command(
        cmd,
        stats,
        quiet=True,
        output_path=str(output_path),
        total_duration=total_duration,
    )

    if success:
        console.print(f"[green]âœ“ Merge successful![/green] Output: {output_path.name}")
    else:
        console.print(f"[red]! Merge failed. Check FFmpeg output for details.[/red]")
        raise typer.Exit(code=1)


@app.command()
def run(
    primary_input: Annotated[
        Path,
        typer.Option(
            "--primary", "-i1", help="Path to the original file (with audio/subtitles)."
        ),
    ],
    video_input: Annotated[
        Path,
        typer.Option(
            "--video", "-i2", help="Path to the Topaz-processed video-only file."
        ),
    ],
    output_dir: Annotated[
        Path,
        typer.Option("--output", "-o", help="Output directory for the merged file."),
    ] = OUTPUT_DIR,
):
    """
    Merges a video-only file with the audio and subtitle tracks from a primary source file.
    """
    if not primary_input.exists():
        console.print(f"[red]! Primary input file not found: {primary_input}[/red]")
        raise typer.Exit(code=1)
    if not video_input.exists():
        console.print(f"[red]! Video input file not found: {video_input}[/red]")
        raise typer.Exit(code=1)

    ensure_dir_exists(output_dir)
    output_path = output_dir / f"{video_input.stem}_merged.mkv"

    console.print(f"[*] Primary (Audio/Subs) Source: {primary_input.name}")
    console.print(f"[*] Video Source: {video_input.name}")
    console.print(f"[*] Output File: {output_path.name}")

    try:
        asyncio.run(merge_files(primary_input, video_input, output_path))
    except KeyboardInterrupt:
        console.print("\n[yellow]! User interrupted the process.[/yellow]")
        raise typer.Exit()


if __name__ == "__main__":
    setup_signal_handler()
    app()
